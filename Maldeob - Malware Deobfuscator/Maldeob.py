import sys, argparse, re


parser = argparse.ArgumentParser(description='Maltek Labs Replacer/Deobfuscator(WIP)', prog='Maldeob', add_help=False)

#cmdline arguments to be passed
parser.add_argument('-h','--help', action='store_true')
parser.add_argument('-a','--array', help='Use -a if malicious script contains an array indexing obfuscation method.', action='store_true')
parser.add_argument('-v','--variable', help='Use -v to find all instances of variables that are initialized but not called. Removes variable noise.', action='store_true')
parser.add_argument("-i", '--input', help="PATH to malicious script.", type=str)
parser.add_argument("-o", "--output", help="PATH to output the completed file.", type=str)
parser.add_argument('--version', action='version', version='%(prog)s 0.5')

#sets up arguments
args = vars(parser.parse_args())
array = args['array']
ifile = args['input']
ofile = args['output']
variable = args['variable']
helpme = args['help']


menu = print( 
                '''
                #######################################################################################
                #███╗   ███╗ █████╗ ██╗  ████████╗███████╗██╗  ██╗    ██╗      █████╗ ██████╗ ███████╗#
                #████╗ ████║██╔══██╗██║  ╚══██╔══╝██╔════╝██║ ██╔╝    ██║     ██╔══██╗██╔══██╗██╔════╝#
                #██╔████╔██║███████║██║     ██║   █████╗  █████╔╝     ██║     ███████║██████╔╝███████╗#
                #██║╚██╔╝██║██╔══██║██║     ██║   ██╔══╝  ██╔═██╗     ██║     ██╔══██║██╔══██╗╚════██║#
                #██║ ╚═╝ ██║██║  ██║███████╗██║   ███████╗██║  ██╗    ███████╗██║  ██║██████╔╝███████║#
                #╚═╝     ╚═╝╚═╝  ╚═╝╚══════╝╚═╝   ╚══════╝╚═╝  ╚═╝    ╚══════╝╚═╝  ╚═╝╚═════╝ ╚══════╝#
                #######################################################################################
                #                           https://maltek-labs.com                                   #
                #                       -Protection begins with analysis-                             #
                #                                                                                     #
                #               Maltek Labs Replacer/Deobfuscator Framework(WIP) v.1                  #
                #######################################################################################
                # optional arguments:                                                                 #
                #   -h, --help            Show this help message and exit                             #
                #   -a, --array           Use -a if malicious script contains an array indexing       #
                #                           obfuscation method. EG (array_name[0], array_name[1], etc)#
                #   -v, --variable        Use -v to find all instances of variables that are          #
                #                           initialized but not called. Removes variable noise.       #
                #   --version             Show program's version number and exit.                     #      
                #                                                                                     #
                # required arguments:                                                                 #
                #   -i INPUT, --input INPUT                                                           #
                #                            PATH to malicious script.                                #
                #   -o OUTPUT, --output OUTPUT                                                        #
                #                            PATH to output the completed file.                       #
                #                                                                                     #
                #######################################################################################
                '''
                )


# converts the inputed file to string
def ConvertList():
    with open(ifile, 'r') as f:
        text = f.readlines()
    
    str = ''  

    for i in text: 
        str += i
    return str


# replace & write function for data that was passed in -a (array) -i (inputfile)
def Array_Replace_Write(Converted_Text):
    i = 0 
    b = 0        

    #Checks and pulls array variable name
    Array_Name_Regex1 = r"var\s(.*?)\s\=\s\["
    Array_Name_Match1 = re.search(Array_Name_Regex1, ConvertList(), re.MULTILINE)

    Array_Name_Regex2 = r"var\s(.*?)\=\["
    Array_Name_Match2 = re.search(Array_Name_Regex2, ConvertList(), re.MULTILINE)

    Array_Name_Regex3 = r"var\s(.*?)\=\s\["
    Array_Name_Match3 = re.search(Array_Name_Regex3, ConvertList(), re.MULTILINE)

    Array_Name_Regex4 = r"var\s(.*?)\s\=\["
    Array_Name_Match4 = re.search(Array_Name_Regex4, ConvertList(), re.MULTILINE)

    if Array_Name_Match1:
        VarName = Array_Name_Match1.group(1)
    elif Array_Name_Match2:
        VarName = Array_Name_Match2.group(1)  
    elif Array_Name_Match3:
        VarName = Array_Name_Match3.group(1)
    elif Array_Name_Match4:
        VarName = Array_Name_Match4.group(1)
    VarName = VarName.strip()
    
    #Error checks to ensure Variable name was pulled successfully
    try:
        VarName
    except:
        print('')
        print('Could not find array variable name. Please supply variable name to replace.')
        print('')
        VarName = input()
        print("########################################################")
        
        if VarName == '':
            print("You have entered an empty name.")
            print("Please enter a name of the array variable. Exiting.")
            print('')
            exit()


    #Checks & pulls array contents
    Array_Contents_Regex1 = r"var.*?\=\s\[(.*?)\]"
    Array_Contents_Name1 = re.search(Array_Contents_Regex1, ConvertList(), re.MULTILINE)

    Array_Contents_Regex2 = r"var.*?\=\[(.*?)\]"
    Array_Contents_Name2 = re.search(Array_Contents_Regex2, ConvertList(), re.MULTILINE)

    if Array_Contents_Name1:
        ArrayContents = str(Array_Contents_Name1.group(1).replace('\'','')).split(',')
    elif Array_Contents_Name2:
        ArrayContents = str(Array_Contents_Name2.group(1).replace('\'','')).split(',')

    while i < len(ArrayContents):
        item = VarName+"[{}]".format(b)
        text_after = Converted_Text.replace(item, ArrayContents[i])
        Converted_Text = text_after
        
        i += 1
        b = str(int(b)+1)
    
    # Checks to see if any array contents were not converted.
    UnconvertedText = Converted_Text.find(VarName+'[')
    if UnconvertedText == -1:
        pass
    else:
        print("Not all array indexes were replaced. Some array indexs are being calulated with other variables.")
        print("")

    return(Converted_Text)
    
def VariableCheck(Converted_Text):
    c = 0
    a = 0
    Var_Array = []

    #Pulls and stores variable names in array. 
    for line in ConvertList().splitlines():
        VarName_Regex1 = r"var\s(.*?)\s\=\s"
        VarName_Match1 = re.search(VarName_Regex1, line, re.MULTILINE)

        VarName_Regex2 = r"var\s(.*?)\="
        VarName_Match2 = re.search(VarName_Regex2, line, re.MULTILINE)

        VarName_Regex3 = r"var\s(.*?)\=\s"
        VarName_Match3 = re.search(VarName_Regex3, line, re.MULTILINE)

        VarName_Regex4 = r"var\s(.*?)\s\="
        VarName_Match4 = re.search(VarName_Regex4, line, re.MULTILINE)

        if VarName_Match1:
            VarName = VarName_Match1.group(1)
        elif VarName_Match2:
            VarName = VarName_Match2.group(1)  
        elif VarName_Match3:
            VarName = VarName_Match3.group(1)
        elif VarName_Match4:
            VarName = VarName_Match4.group(1)
        VarName = str(VarName.strip())
        
        if VarName in Var_Array:
            pass
        else:
            Var_Array.append(VarName)

    #Checks each variable pulled and attempts to see if it is the only one initialized.
    while c < len(Var_Array):
        Var_Array_Name = Var_Array[a]
        regex = r"^(var\s{Var_Array_Name}.*);"
        
        if Converted_Text.count(Var_Array[a]) == 1:        
            text_after = re.sub(rf"(^var\s{Var_Array_Name}.*?\;$)", '', Converted_Text, flags=re.M)
            Converted_Text = text_after

        c += 1
        a += 1
    return(Converted_Text)
     
if __name__ == "__main__":
    
    if helpme == True:
        exit()
        print('')
 
    Converted_Text = ConvertList() 
    for arg in args:
        if variable == True:
            Converted_Text = VariableCheck(Converted_Text)
        if array == True:
            Converted_Text = Array_Replace_Write(Converted_Text)

    with open(ofile,'w') as w:
        w.writelines(Converted_Text)
        print('')
        print('The file has been outputted to: '+ ofile) 
        print('')
        print('Press enter to exit')
        input()
        exit()
