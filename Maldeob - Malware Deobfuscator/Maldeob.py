import sys, argparse, re, jsbeautifier
from Array_Replacer import Pull_Array
from VariableCheck import VariableCheck

###############################################################################################################
menu = print( 
                '''
                #######################################################################################
                #███╗   ███╗ █████╗ ██╗  ████████╗███████╗██╗  ██╗    ██╗      █████╗ ██████╗ ███████╗#
                #████╗ ████║██╔══██╗██║  ╚══██╔══╝██╔════╝██║ ██╔╝    ██║     ██╔══██╗██╔══██╗██╔════╝#
                #██╔████╔██║███████║██║     ██║   █████╗  █████╔╝     ██║     ███████║██████╔╝███████╗#
                #██║╚██╔╝██║██╔══██║██║     ██║   ██╔══╝  ██╔═██╗     ██║     ██╔══██║██╔══██╗╚════██║#
                #██║ ╚═╝ ██║██║  ██║███████╗██║   ███████╗██║  ██╗    ███████╗██║  ██║██████╔╝███████║#
                #╚═╝     ╚═╝╚═╝  ╚═╝╚══════╝╚═╝   ╚══════╝╚═╝  ╚═╝    ╚══════╝╚═╝  ╚═╝╚═════╝ ╚══════╝#
                #######################################################################################
                #                           https://maltek-labs.com                                   #
                #                       -Protection begins with analysis-                             #
                #                                                                                     #
                #               Maltek Labs Replacer/Deobfuscator Framework(WIP) v.1                  #
                #######################################################################################
                # optional arguments:                                                                 #
                #   -h, --help            Show this help message and exit                             #
                #   -a, --array           Use -a if malicious script contains an array indexing       #
                #                           obfuscation method. EG (array_name[0], array_name[1], etc)#
                #   -v, --variable        Use -v to find all instances of variables that are          #
                #                           initialized but not called. Removes variable noise.       #
                #   --version             Show program's version number and exit.                     #      
                #                                                                                     #
                # required arguments:                                                                 #
                #   -i INPUT, --input INPUT                                                           #
                #                            PATH to malicious script.                                #
                #   -o OUTPUT, --output OUTPUT                                                        #
                #                            PATH to output the completed file.                       #
                #                                                                                     #
                #######################################################################################
                '''
                )
###############################################################################################################

parser = argparse.ArgumentParser(description='Maltek Labs Replacer/Deobfuscator(WIP)', prog='Maldeob', add_help=False)

#cmdline arguments to be passed
parser.add_argument('-h','--help', action='store_true')
parser.add_argument('-a','--array', help='Use -a if malicious script contains an array indexing obfuscation method.', action='store_true')
parser.add_argument('-v','--variable', help='Use -v to find all instances of variables that are initialized but not called. Removes variable noise.', action='store_true')
parser.add_argument("-i", '--input', help="PATH to malicious script.", type=str)
parser.add_argument("-o", "--output", help="PATH to output the completed file.", type=str)
parser.add_argument('--version', action='version', version='%(prog)s 0.5')

#sets up arguments
args = vars(parser.parse_args())
array = args['array']
ifile = args['input']
ofile = args['output']
variable = args['variable']
helpme = args['help']

###############################################################################################################

#Beautifier Settings
opts = jsbeautifier.BeautifierOptions
Converted_Text = str(jsbeautifier.beautify_file(ifile, opts))

opts.indent_size = 4
opts.indent_with_tabs = True
opts.editorconfig = False
opts.eol = '\n'
opts.end_with_newline = True
opts.indent_level = 0
opts.preserve_newlines = True
opts.max_preserve_newlines = 10
opts.space_in_paren = True
opts.space_in_empty_paren = False
opts.jslint_happy = False
opts.space_after_anon_function = True
opts.space_after_named_function = True
opts.brace_style = 'inline'
opts.unindent_chained_methods = False
opts.break_chained_methods = False
opts.keep_array_indentation = True
opts.unescape_strings = False
opts.wrap_line_length = 0
opts.e4x = True
opts.comma_first = False
opts.indent_empty_lines = False
opts.templating = ['auto']
opts.space_before_conditional = True

#evals JS code. Future setting. 
opts.eval_code = False

###############################################################################################################

     
if __name__ == "__main__":
    
    if helpme == True:
        exit()
        print('')

    if variable == True:
        Converted_Text = VariableCheck(Converted_Text)
    if array == True:
        Converted_Text = Pull_Array(Converted_Text)
 
    with open(ofile,'w') as w:
        w.write(Converted_Text.strip().replace('\n',''))
        print('#########################################')
        print('')
        print('The file has been outputted to: '+ ofile) 
        print('')
        print('Press enter to exit')
        input()
        exit()
